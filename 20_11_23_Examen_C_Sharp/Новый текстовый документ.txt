Задание: Система управления аккаунтами пользователей
Скопировать информацию с JSON(Сделать меню выбора действий в консоли)
На языке C#, разработать управления аккаунтами пользователей.
Использовать ООП, Generics, работе с файлами (обычный файл, JSON, XML), делегатов и событий.
 
Требования к заданию: Сделать в разных файлах. 
Создайте класс User, который будет представлять пользователя с полями:
Id (уникальный идентификатор пользователя)
Username (имя пользователя)
Email (адрес электронной почты пользователя)

Создайте интерфейс IUserStorage, который определит основные операции для управления аккаунтами пользователей:
AddUser - добавление нового пользователя
GetUser - получение пользователя по его идентификатору
UpdateUser - обновление информации о пользователе
DeleteUser - удаление пользователя
Реализуйте класс UserStorage, который будет реализовывать интерфейс IUserStorage
и предоставлять методы для управления аккаунтами пользователей. Для хранения пользователей можно использовать List<User>.

Добавьте в класс UserStorage события:
UserAdded - событие, которое будет вызываться при добавлении нового пользователя
UserDeleted - событие, которое будет вызываться при удалении пользователя
Реализуйте делегат UserChangedDelegate, который будет принимать параметр типа User и возвращать void. Используйте этот делегат
для определения событий UserAdded и UserDeleted.
Создайте класс FileManager, который будет отвечать за сохранение и загрузку данных пользователей из файлов:
Методы SaveToFile и LoadFromFile должны работать с обычным файлом, JSON и XML форматами, в зависимости от расширения файла.
Для работы с JSON форматом можно использовать библиотеку Newtonsoft.Json (Json.NET).
Для работы с XML форматом можно использовать классы из пространства имен System.Xml.
Напишите консольное приложение, в котором будет использоваться созданные классы и методы:
Приложение должно предоставлять меню с возможностью добавления, получения, обновления и удаления пользователей.
После каждой операции с пользователем должно вызываться соответствующее событие.
При выходе из приложения данные пользователей должны сохраняться в файл.
Примечания:
Рекомендуется использовать принципы SOLID и хорошие практики программирования. Для бысрого добавления изменения в код.
Использовать обработку исключений и чтобы не выскавивало ошибок при неправильном  вводе данных.
После завершения задания убедитесь, что код работает как ожидается и сохраняет данные в файл корректно.